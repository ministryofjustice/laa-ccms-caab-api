package uk.gov.laa.ccms.data.api.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.net.URI;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import uk.gov.laa.ccms.caab.api.controller.CaseOutcomeController;
import uk.gov.laa.ccms.caab.api.service.CaseOutcomeService;
import uk.gov.laa.ccms.caab.model.CaseOutcomeDetail;
import uk.gov.laa.ccms.caab.model.CaseOutcomeDetails;

public abstract class BaseCaseOutcomeControllerIntegrationTest
    extends AbstractControllerIntegrationTest {

  @Autowired
  private CaseOutcomeController caseOutcomeController;

  @Autowired
  private CaseOutcomeService caseOutcomeService;

  @Test
  @Sql(scripts = {"/sql/application_insert.sql", "/sql/opponent_insert.sql","/sql/case_outcome_insert.sql"})
  public void testGetCaseOutcomes_byCaseReferenceNumber() {

    // Call the getCaseOutcomes method directly
    ResponseEntity<CaseOutcomeDetails> responseEntity =
        caseOutcomeController.getCaseOutcomes(
            "caseRef",
            null);

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    assertNotNull(responseEntity.getBody());
    assertNotNull(responseEntity.getBody().getContent());
    assertEquals(2, responseEntity.getBody().getContent().size());

    CaseOutcomeDetail retrievedCaseOutcomeDetail =
        caseOutcomeService.getCaseOutcome(1L);

    assertEquals(retrievedCaseOutcomeDetail, responseEntity.getBody().getContent().get(0));
  }

//  @Test
//  @Sql(scripts = {"/sql/application_insert.sql", "/sql/opponent_insert.sql","/sql/case_outcome_insert.sql"})
//  public void testGetCaseOutcomes_byCaseReferenceNumberAndProviderId_queriesCorrectly() {
//
//    // Call the getCaseOutcomes method directly
//    ResponseEntity<CaseOutcomeDetails> responseEntity =
//        caseOutcomeController.getCaseOutcomes(
//            "caseRef",
//            "providerId2");
//
//    assertNotNull(responseEntity);
//    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
//    assertNotNull(responseEntity.getBody());
//    assertNotNull(responseEntity.getBody().getContent());
//    assertEquals(1, responseEntity.getBody().getContent().size());
//
//    CaseOutcomeDetail retrievedCaseOutcomeDetail =
//        caseOutcomeService.getCaseOutcome(2L);
//
//    assertEquals(retrievedCaseOutcomeDetail, responseEntity.getBody().getContent().get(0));
//  }
//
//  @Test
//  @Sql(scripts = {"/sql/application_insert.sql", "/sql/opponent_insert.sql","/sql/case_outcome_insert.sql"})
//  public void testGetCaseOutcomes_unknownCaseReferenceNumber_queriesCorrectly() {
//
//    // Call the getCaseOutcomes method directly
//    ResponseEntity<CaseOutcomeDetails> responseEntity =
//        caseOutcomeController.getCaseOutcomes(
//            "nonsense",
//            null);
//
//    assertNotNull(responseEntity);
//    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
//    assertNotNull(responseEntity.getBody());
//    assertNotNull(responseEntity.getBody().getContent());
//    assertTrue(responseEntity.getBody().getContent().isEmpty());
//  }

  @Test
  public void testCreateCaseOutcome() throws Exception {

    CaseOutcomeDetail caseOutcomeDetail = loadObjectFromJson(
        "/json/case_outcome_new.json", CaseOutcomeDetail.class);

    String auditUser = "audit@user.com";

    // Call the createEvidenceDocument method directly
    ResponseEntity<Void> responseEntity =
        caseOutcomeController.createCaseOutcome(auditUser, caseOutcomeDetail);

    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());
    URI locationUri = responseEntity.getHeaders().getLocation();

    String path = locationUri.getPath();
    String id = path.substring(path.lastIndexOf('/') + 1);

    CaseOutcomeDetail savedCaseOutcomeDetail =
        caseOutcomeService.getCaseOutcome(Long.valueOf(id));

    assertAuditTrail(savedCaseOutcomeDetail.getAuditTrail(), auditUser);

    // Clear the audit trail for comparison purposes.
    savedCaseOutcomeDetail.setAuditTrail(null);

    // null/ignore the ids as theses are generated by the database
    savedCaseOutcomeDetail.setId(null);

    assertEquals(caseOutcomeDetail, savedCaseOutcomeDetail);
  }

}
