package uk.gov.laa.ccms.data.api.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.net.URI;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import uk.gov.laa.ccms.caab.api.controller.NotificationAttachmentController;
import uk.gov.laa.ccms.caab.api.service.NotificationAttachmentService;
import uk.gov.laa.ccms.caab.model.BaseNotificationAttachmentDetail;
import uk.gov.laa.ccms.caab.model.NotificationAttachmentDetail;
import uk.gov.laa.ccms.caab.model.NotificationAttachmentDetails;

public abstract class BaseNotificationAttachmentControllerIntegrationTest extends AbstractControllerIntegrationTest  {

  @Autowired
  private NotificationAttachmentController notificationAttachmentController;

  @Autowired
  private NotificationAttachmentService notificationAttachmentService;

  @Test
  public void testCreateNotificationAttachment() throws Exception {

    NotificationAttachmentDetail notificationAttachmentDetail = loadObjectFromJson(
        "/json/notification_attachment_new.json", NotificationAttachmentDetail.class);

    String auditUser = "audit@user.com";

    // Call the createNotificationAttachment method directly
    ResponseEntity<Void> responseEntity =
        notificationAttachmentController.createNotificationAttachment(auditUser, notificationAttachmentDetail);

    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());
    URI locationUri = responseEntity.getHeaders().getLocation();

    String path = locationUri.getPath();
    String id = path.substring(path.lastIndexOf('/') + 1);

    NotificationAttachmentDetail savedNotificationAttachmentDetail =
        notificationAttachmentService.getNotificationAttachment(Long.valueOf(id));

    assertAuditTrail(savedNotificationAttachmentDetail.getAuditTrail(), auditUser);

    // Clear the audit trail for comparison purposes.
    savedNotificationAttachmentDetail.setAuditTrail(null);

    // null/ignore the ids as theses are generated by the database
    savedNotificationAttachmentDetail.setId(null);

    assertEquals(notificationAttachmentDetail, savedNotificationAttachmentDetail);
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testGetNotificationAttachments_unfilteredReturnsAll() {

    // Call the getNotificationAttachments method directly
    ResponseEntity<NotificationAttachmentDetails> responseEntity =
        notificationAttachmentController.getNotificationAttachments(
            null,
            null,
            null,
            null,
            Pageable.unpaged()
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    assertNotNull(responseEntity.getBody());
    assertNotNull(responseEntity.getBody().getContent());
    assertEquals(3, responseEntity.getBody().getContent().size());

    NotificationAttachmentDetail firstRetrievedNotificationAttachmentDetail =
        notificationAttachmentService.getNotificationAttachment(282L);
    NotificationAttachmentDetail secondRetrievedNotificationAttachmentDetail =
        notificationAttachmentService.getNotificationAttachment(283L);
    NotificationAttachmentDetail thirdRetrievedNotificationAttachmentDetail =
        notificationAttachmentService.getNotificationAttachment(284L);

    compareData(firstRetrievedNotificationAttachmentDetail, responseEntity.getBody().getContent().get(0));
    compareData(secondRetrievedNotificationAttachmentDetail, responseEntity.getBody().getContent().get(1));
    compareData(thirdRetrievedNotificationAttachmentDetail, responseEntity.getBody().getContent().get(2));
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testGetNotificationAttachments_byNotificationReference() {

    // Call the getNotificationAttachments method directly
    ResponseEntity<NotificationAttachmentDetails> responseEntity =
        notificationAttachmentController.getNotificationAttachments(
            "123451",
            null,
            null,
            null,
            Pageable.unpaged()
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    assertNotNull(responseEntity.getBody());
    assertNotNull(responseEntity.getBody().getContent());
    assertEquals(1, responseEntity.getBody().getContent().size());

    NotificationAttachmentDetail retrievedNotificationAttachmentDetail =
        notificationAttachmentService.getNotificationAttachment(282L);

    compareData(retrievedNotificationAttachmentDetail, responseEntity.getBody().getContent().getFirst());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testGetNotificationAttachments_usingAllFields() {

    // Call the getNotificationAttachments method directly
    ResponseEntity<NotificationAttachmentDetails> responseEntity =
        notificationAttachmentController.getNotificationAttachments(
            "123451",
            "123452",
            "123453",
            "Electronic",
            Pageable.unpaged()
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    assertNotNull(responseEntity.getBody());
    assertNotNull(responseEntity.getBody().getContent());
    assertEquals(1, responseEntity.getBody().getContent().size());

    NotificationAttachmentDetail retrievedNotificationAttachmentDetails =
        notificationAttachmentService.getNotificationAttachment(282L);

    compareData(retrievedNotificationAttachmentDetails, responseEntity.getBody().getContent().getFirst());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testGetNotificationAttachments_byProviderId() {

    // Call the getNotificationAttachments method directly
    ResponseEntity<NotificationAttachmentDetails> responseEntity =
        notificationAttachmentController.getNotificationAttachments(
            null,
            "123452",
            null,
            null,
            Pageable.unpaged()
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    assertNotNull(responseEntity.getBody());
    assertNotNull(responseEntity.getBody().getContent());
    assertEquals(1, responseEntity.getBody().getContent().size());

    NotificationAttachmentDetail retrievedNotificationAttachmentDetails =
        notificationAttachmentService.getNotificationAttachment(282L);
    
    compareData(retrievedNotificationAttachmentDetails, responseEntity.getBody().getContent().getFirst());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testGetNotificationAttachments_byDocumentType() {

    // Call the getNotificationAttachments method directly
    ResponseEntity<NotificationAttachmentDetails> responseEntity =
        notificationAttachmentController.getNotificationAttachments(
            null,
            null,
            "123456",
            null,
            Pageable.unpaged()
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    assertNotNull(responseEntity.getBody());
    assertNotNull(responseEntity.getBody().getContent());
    assertEquals(1, responseEntity.getBody().getContent().size());

    NotificationAttachmentDetail retrievedNotificationAttachmentDetails =
        notificationAttachmentService.getNotificationAttachment(283L);

    compareData(retrievedNotificationAttachmentDetails, responseEntity.getBody().getContent().getFirst());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testGetNotificationAttachments_bySendBy() {

    // Call the getNotificationAttachments method directly
    ResponseEntity<NotificationAttachmentDetails> responseEntity =
        notificationAttachmentController.getNotificationAttachments(
            null,
            null,
            null,
            "Electronic",
            Pageable.unpaged()
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    assertNotNull(responseEntity.getBody());
    assertNotNull(responseEntity.getBody().getContent());
    assertEquals(2, responseEntity.getBody().getContent().size());

    NotificationAttachmentDetail firstRetrievedNotificationAttachmentDetail =
        notificationAttachmentService.getNotificationAttachment(282L);
    NotificationAttachmentDetail secondRetrievedNotificationAttachmentDetail =
        notificationAttachmentService.getNotificationAttachment(283L);

    compareData(firstRetrievedNotificationAttachmentDetail, responseEntity.getBody().getContent().getFirst());
    compareData(secondRetrievedNotificationAttachmentDetail, responseEntity.getBody().getContent().getLast());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testGetNotificationAttachment() {

    // Call the getNotificationAttachment method directly
    ResponseEntity<NotificationAttachmentDetail> responseEntity =
        notificationAttachmentController.getNotificationAttachment(282L);

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    assertNotNull(responseEntity.getBody());
    assertEquals(282, responseEntity.getBody().getId());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testRemoveNotificationAttachment() {

    // Call the removeNotificationAttachments method directly
    ResponseEntity<Void> responseEntity =
        notificationAttachmentController.removeNotificationAttachment(282L,
            caabUserLoginId);

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());

    NotificationAttachmentDetails queriedDocuments =
        notificationAttachmentController.getNotificationAttachments(
            "123451",
            "123452",
            "123453",
            "Electronic",
            Pageable.unpaged()
        ).getBody();

    assertNotNull(queriedDocuments);
    assertTrue(queriedDocuments.getContent().isEmpty());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testRemoveNotificationAttachments_usingAllFields() {

    // Call the removeNotificationAttachments method directly
    ResponseEntity<Void> responseEntity =
        notificationAttachmentController.removeNotificationAttachments(
            "Caab-user-login-id",
            "123451",
            "123452",
            "123453",
            "Electronic"
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());

    // Check that only 1 of the NotificationAttachments (with Send By = Electronic) has been deleted.
    NotificationAttachmentDetails queriedDocuments =
        notificationAttachmentController.getNotificationAttachments(
            null,
            null,
            null,
            "Electronic",
            Pageable.unpaged()
        ).getBody();

    assertNotNull(queriedDocuments);
    assertEquals(1, queriedDocuments.getContent().size());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testRemoveNotificationAttachments_byNotificationReference() {

    // Call the removeNotificationAttachments method directly
    ResponseEntity<Void> responseEntity =
        notificationAttachmentController.removeNotificationAttachments(
            "Caab-user-login-id",
            "123451",
            null,
            null,
            null
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());

    NotificationAttachmentDetails queriedDocuments =
        notificationAttachmentController.getNotificationAttachments(
            "123451",
            null,
            null,
            null,
            Pageable.unpaged()
        ).getBody();

    assertNotNull(queriedDocuments);
    assertTrue(queriedDocuments.getContent().isEmpty());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testRemoveNotificationAttachments_byProviderId() {

    // Call the removeNotificationAttachments method directly
    ResponseEntity<Void> responseEntity =
        notificationAttachmentController.removeNotificationAttachments(
            "Caab-user-login-id",
            null,
            "123452",
            null,
            null
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());

    NotificationAttachmentDetails queriedDocuments =
        notificationAttachmentController.getNotificationAttachments(
            null,
            "123452",
            null,
            null,
            Pageable.unpaged()
        ).getBody();

    assertNotNull(queriedDocuments);
    assertTrue(queriedDocuments.getContent().isEmpty());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testRemoveNotificationAttachments_byDocumentType() {

    // Call the removeNotificationAttachments method directly
    ResponseEntity<Void> responseEntity =
        notificationAttachmentController.removeNotificationAttachments(
            "Caab-user-login-id",
            null,
            null,
            "123453",
            null
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());

    NotificationAttachmentDetails queriedDocuments =
        notificationAttachmentController.getNotificationAttachments(
            null,
            null,
            "123453",
            null,
            Pageable.unpaged()
        ).getBody();

    assertNotNull(queriedDocuments);
    assertTrue(queriedDocuments.getContent().isEmpty());
  }

  @Test
  @Sql(scripts = "/sql/notification_attachment_insert.sql")
  public void testRemoveNotificationAttachments_bySendBy() {

    // Call the removeNotificationAttachments method directly
    ResponseEntity<Void> responseEntity =
        notificationAttachmentController.removeNotificationAttachments(
            "Caab-user-login-id",
            null,
            null,
            null,
            "Electronic"
        );

    assertNotNull(responseEntity);
    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());

    NotificationAttachmentDetails queriedDocuments =
        notificationAttachmentController.getNotificationAttachments(
            null,
            null,
            null,
            "Electronic",
            Pageable.unpaged()
        ).getBody();

    assertNotNull(queriedDocuments);
    assertTrue(queriedDocuments.getContent().isEmpty());
  }

  private static void compareData(NotificationAttachmentDetail retrievedNotificationAttachmentDetail,
      BaseNotificationAttachmentDetail baseNotificationAttachmentDetail) {
    assertEquals(retrievedNotificationAttachmentDetail.getId(), baseNotificationAttachmentDetail.getId());
    assertEquals(retrievedNotificationAttachmentDetail.getDescription(), baseNotificationAttachmentDetail.getDescription());
    assertEquals(retrievedNotificationAttachmentDetail.getDocumentType(), baseNotificationAttachmentDetail.getDocumentType());
    assertEquals(retrievedNotificationAttachmentDetail.getFileName(), baseNotificationAttachmentDetail.getFileName());
    assertEquals(retrievedNotificationAttachmentDetail.getProviderId(), baseNotificationAttachmentDetail.getProviderId());
    assertEquals(retrievedNotificationAttachmentDetail.getNumber(), baseNotificationAttachmentDetail.getNumber());
    assertEquals(retrievedNotificationAttachmentDetail.getSendBy(), baseNotificationAttachmentDetail.getSendBy());
    assertEquals(retrievedNotificationAttachmentDetail.getStatus(), baseNotificationAttachmentDetail.getStatus());
  }

}
